service: workshop-${self:custom.name}

frameworkVersion: '3'

custom:
  name: luisserrano
  export-env:
    overwrite: true
  exportOutputs:
    include:
      - E2eTestQueueUrl
      - CognitoUserPoolServerClientId
    output:
      file: ./.env-outputs

  serverless-iam-roles-per-function:
    defaultInherit: true

  lumigo:
    token: t_efd81af772f74e56b5add
    nodePackageManager: npm

  # Specific to @dazn/lambda-powertools-logger
  logLevel:
    prod: INFO
    default: DEBUG

  # Enable or disable caching globally
  apiGatewayCaching:
    enabled: false # disable all cache for now, since it has additional costs and is something that should only be enabled at a later time based on usage
    clusterSize: '0.5' # defaults to '0.5'
    ttlInSeconds: 300 # defaults to the maximum allowed: 3600
    dataEncrypted: true # defaults to false
    perKeyInvalidation:
      requireAuthorization: true # default is true
      handleUnauthorizedRequests: Ignore # default is "IgnoreWithWarning".

  # Configures throttling settings for the API Gateway stage
  # They apply to all http endpoints, unless specifically overridden
  apiGatewayThrottling:
    maxRequestsPerSecond: 1000
    maxConcurrentRequests: 500

  #  # Disabled WAF Association for now, since WAF is not being created
  #  associateWaf:
  #    name: MyWAFRegionalWebACL
  #    version: Regional #(optional) Regional | V2

  alerts:
    stages:
      - production
      - dev
    dashboards: vertical #true
    topics:
      alarm:
        # https://www.serverless.com/framework/docs/providers/aws/guide/variables#referencing-serverless-core-variables
        topic: ${self:service}-${sls:stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: LMSSerrano@gmail.com
    alarms:
      # Default (although fine-tuned)
      - functionErrors
      - functionThrottles
      - functionInvocations
      - functionDuration
      # Custom
      #- restaurantsSearchErrors
      #- restaurantsSearchLatency
      - restaurantsSearchForCartoon
    definitions:
      # Fine-tuning default alarms
      functionInvocations:
        threshold: 100
        treatMissingData: missing
      functionDuration:
        threshold: 500
        treatMissingData: missing
      # Defining new custom alarms
      restaurantsSearchErrors:
        namespace: 'AWS/Lambda'
        description: '/search 5xx errors'
        metric: Errors
        threshold: 1
        treatMissingData: notBreaching
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
      restaurantsSearchLatency:
        namespace: 'prod-serverless-workshop'
        description: '/search latency'
        metric: latency
        threshold: 500
        treatMissingData: notBreaching
        statistic: Average
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
      restaurantsSearchForCartoon:
        namespace: 'prod-serverless-workshop'
        description: '/search for theme: cartoon'
        metric: searchThemeCartoon
        threshold: 100
        treatMissingData: notBreaching
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        pattern: '{$.theme = "cartoon"}'

provider:
  name: aws
  runtime: nodejs16.x

  stage: dev
  region: eu-west-1

  apiGateway:
    metrics: true

  eventBridge:
    useCloudFormation: true

  environment:
    rest_api_url:
      Fn::Join:
        - ""
        - - https://
          - !Ref ApiGatewayRestApi
          - .execute-api.${aws:region}.amazonaws.com/${sls:stage}
    serviceName: ${self:service}
    stage: ${sls:stage}
    middy_cache_enabled: true
    middy_cache_expiry_milliseconds: ${1 * 60 * 1000} # 1 mins
    LOG_LEVEL: ${self:custom.logLevel.${sls:stage}, self:custom.logLevel.default}
    SAMPLE_DEBUG_LOG_RATE: 0.1 # 10% of invocations will have LOG_LEVEL = DEBUG
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

  tracing:
    apiGateway: true
    lambda: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "xray:PutTraceSegments"
            - "xray:PutTelemetryRecords"
          Resource: "*"

functions:
  get-index:
    handler: functions/get-index.handler
    events:
      - http:
          path: /
          method: get
          caching:
            enabled: true
            ttlInSeconds: 600 # overrides the global setting for ttlInSeconds
          throttling:
            maxRequestsPerSecond: 2000
            maxConcurrentRequests: 1000
    environment:
      restaurants_api: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}/restaurants
      cognito_user_pool_id: !Ref CognitoUserPool
      cognito_client_id: !Ref WebCognitoUserPoolClient
      orders_api: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}/orders
    iamRoleStatements:
      - Effect: Allow
        Action: execute-api:Invoke
        Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${sls:stage}/GET/restaurants


  get-restaurants:
    handler: functions/get-restaurants.handler
    memorySize: 512
    events:
      - http:
          path: /restaurants
          method: get
          authorizer: aws_iam
          caching:
            enabled: true
    environment:
      restaurants_table: !Ref RestaurantsTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:scan
        Resource: !GetAtt RestaurantsTable.Arn
      - Effect: Allow
        Action: ssm:GetParameters*
        Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${sls:stage}/get-restaurants/config

  search-restaurants:
    handler: functions/search-restaurants.handler
    events:
      - http:
          path: /restaurants/search
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
          caching:
            enabled: true
            cacheKeyParameters:
              - name: integration.request.header.theme
                mappedFrom: method.request.body.theme
          request:
            schemas:
              application/json:
                schema: ${file(./schemas/search-restaurants-schema.json)}
                name: PostSearchRestaurantModel
                description: 'Validation model for Searching Restaurants'
    alarms:
      - name: restaurantsSearchErrors
        enabled: true
      - name: restaurantsSearchLatency
        enabled: true
    environment:
      restaurants_table: !Ref RestaurantsTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:scan
        Resource: !GetAtt RestaurantsTable.Arn
      - Effect: Allow
        Action: ssm:GetParameters*
        Resource:
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${sls:stage}/search-restaurants/config
#          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${sls:stage}/search-restaurants/secretString
#      - Effect: Allow
#        Action: kms:Decrypt
#        Resource: ${ssm:/${self:service}/${sls:stage}/kmsArn}

  place-order:
    handler: functions/place-order.handler
    events:
      - http:
          path: /orders
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      bus_name: !Ref EventBus
    iamRoleStatements:
      - Effect: Allow
        Action: events:PutEvents
        Resource: !GetAtt EventBus.Arn

  notify-restaurant:
    handler: functions/notify-restaurant.handler
    events:
      - eventBridge:
          eventBus: !Ref EventBus
          pattern:
            source:
              - big-mouth
            detail-type:
              - order_placed
    environment:
      bus_name: !Ref EventBus
      restaurant_notification_topic: !Ref RestaurantNotificationTopic
    iamRoleStatements:
      - Effect: Allow
        Action: events:PutEvents
        Resource: !GetAtt EventBus.Arn
      - Effect: Allow
        Action: sns:Publish
        Resource: !Ref RestaurantNotificationTopic

resources:
  - Conditions:
      IsE2eTest:
        # With "serverless-plugin-extrinsic-functions" plugin
        Fn::EndsWith:
          - ${sls:stage}
          - dev
#        # Without any plugins
#        Fn::Or:
#          - Fn::Equals:
#            - ${sls:stage}
#            - dev
#          - Fn::Equals:
#            - ${sls:stage}
#            - ci-dev

  # Disabled WAF Creation for costing purposes
  #- ${file(./resources/waf.yml)}
  - ${file(./resources/ssm-parameters.yml)}
  - Resources:
      RestaurantsTable:
        Type: AWS::DynamoDB::Table
        Properties:
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            - AttributeName: name
              AttributeType: S
          KeySchema:
            - AttributeName: name
              KeyType: HASH

      CognitoUserPool:
        Type: AWS::Cognito::UserPool
        Properties:
          AliasAttributes:
            - email
          UsernameConfiguration:
            CaseSensitive: false
          AutoVerifiedAttributes:
            - email
          Policies:
            PasswordPolicy:
              MinimumLength: 8
              RequireLowercase: true
              RequireNumbers: true
              RequireUppercase: true
              RequireSymbols: true
          Schema:
            - AttributeDataType: String
              Mutable: true
              Name: given_name
              Required: true
              StringAttributeConstraints:
                MinLength: "1"
            - AttributeDataType: String
              Mutable: true
              Name: family_name
              Required: true
              StringAttributeConstraints:
                MinLength: "1"
            - AttributeDataType: String
              Mutable: true
              Name: email
              Required: true
              StringAttributeConstraints:
                MinLength: "1"

      WebCognitoUserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
          ClientName: web
          UserPoolId: !Ref CognitoUserPool
          ExplicitAuthFlows:
            - ALLOW_USER_SRP_AUTH
            - ALLOW_REFRESH_TOKEN_AUTH
          PreventUserExistenceErrors: ENABLED

      ServerCognitoUserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
          ClientName: server
          UserPoolId: !Ref CognitoUserPool
          ExplicitAuthFlows:
            - ALLOW_ADMIN_USER_PASSWORD_AUTH
            - ALLOW_REFRESH_TOKEN_AUTH
          PreventUserExistenceErrors: ENABLED

      ServiceUrlParameter:
        Type: AWS::SSM::Parameter
        Properties:
          Type: String
          Name: /${self:service}/${sls:stage}/serviceUrl
          Value:
            Fn::Join:
              - ""
              - - https://
                - !Ref ApiGatewayRestApi
                - .execute-api.${aws:region}.amazonaws.com/${sls:stage}

      EventBus:
        Type: AWS::Events::EventBus
        Properties:
          Name: order_events_${sls:stage}_${self:custom.name}

      RestaurantNotificationTopic:
        Type: AWS::SNS::Topic

      E2eTestQueue:
        Type: AWS::SQS::Queue
        Condition: IsE2eTest
        Properties:
          MessageRetentionPeriod: 60
          VisibilityTimeout: 1

      E2eTestQueuePolicy:
        Type: AWS::SQS::QueuePolicy
        Condition: IsE2eTest
        Properties:
          Queues:
            - !Ref E2eTestQueue
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal: "*"
                Action: SQS:SendMessage
                Resource: !GetAtt E2eTestQueue.Arn
                Condition:
                  ArnEquals:
                    aws:SourceArn: !Ref RestaurantNotificationTopic
              - Effect: Allow
                Principal: "*"
                Action: SQS:SendMessage
                Resource: !GetAtt E2eTestQueue.Arn
                Condition:
                  ArnEquals:
                    aws:SourceArn: !GetAtt E2eTestEventBridgeRule.Arn

      E2eTestSnsSubscription:
        Type: AWS::SNS::Subscription
        Condition: IsE2eTest
        Properties:
          Protocol: sqs
          Endpoint: !GetAtt E2eTestQueue.Arn
          RawMessageDelivery: false
          Region: !Ref AWS::Region
          TopicArn: !Ref RestaurantNotificationTopic

      E2eTestEventBridgeRule:
        Type: AWS::Events::Rule
        Condition: IsE2eTest
        Properties:
          EventBusName: !Ref EventBus
          EventPattern:
            source: ["big-mouth"]
          State: ENABLED
          Targets:
            - Arn: !GetAtt E2eTestQueue.Arn
              Id: e2eTestQueue
              InputTransformer:
                InputPathsMap:
                  source: "$.source"
                  detailType: "$.detail-type"
                  detail: "$.detail"
                InputTemplate: !Sub >
                  {
                    "event": {
                      "source": <source>,
                      "detail-type": <detailType>,
                      "detail": <detail>
                    },
                    "eventBusName": "${EventBus}"
                  }

  - Outputs:
      RestaurantsTableName:
        Value: !Ref RestaurantsTable

      CognitoUserPoolId:
        Value: !Ref CognitoUserPool

      CognitoUserPoolArn:
        Value: !GetAtt CognitoUserPool.Arn

      CognitoUserPoolWebClientId:
        Value: !Ref WebCognitoUserPoolClient

      CognitoUserPoolServerClientId:
        Value: !Ref ServerCognitoUserPoolClient

      EventBusName:
        Value: !Ref EventBus

      RestaurantNotificationTopicName:
        Value: !GetAtt RestaurantNotificationTopic.TopicName

      RestaurantNotificationTopicArn:
        Value: !Ref RestaurantNotificationTopic

      E2eTestQueueUrl:
        Condition: IsE2eTest
        Value: !Ref E2eTestQueue

plugins:
  - serverless-export-env
  - serverless-export-outputs
  - serverless-iam-roles-per-function
  - serverless-lumigo
  - serverless-api-gateway-caching
  - serverless-api-gateway-throttling
  - serverless-associate-waf
  - serverless-plugin-aws-alerts
  - serverless-plugin-extrinsic-functions
