# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: workshop-${self:custom.name}
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

custom:
  name: luisserrano
  export-env:
    overwrite: true

  appname: app-luisserrano

  # Enable or disable caching globally
  apiGatewayCaching:
    enabled: false # disable all cache for now, since it has additional costs and is something that should only be enabled at a later time based on usage
    clusterSize: '0.5' # defaults to '0.5'
    ttlInSeconds: 300 # defaults to the maximum allowed: 3600
    dataEncrypted: true # defaults to false
    perKeyInvalidation:
      requireAuthorization: true # default is true
      handleUnauthorizedRequests: Ignore # default is "IgnoreWithWarning".

  # Configures throttling settings for the API Gateway stage
  # They apply to all http endpoints, unless specifically overridden
  apiGatewayThrottling:
    maxRequestsPerSecond: 1000
    maxConcurrentRequests: 500

#  # Disabled WAF Association for now, since WAF is not being created
#  associateWaf:
#    name: MyWAFRegionalWebACL
#    version: Regional #(optional) Regional | V2

provider:
  name: aws
  runtime: nodejs14.x

  stage: dev
  region: eu-west-1

  apiGateway:
    metrics: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action: dynamodb:scan
          Resource: !GetAtt RestaurantsTable.Arn
        - Effect: Allow
          Action: execute-api:Invoke
          Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${sls:stage}/GET/restaurants

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  get-index:
    handler: functions/get-index.handler
    events:
      - http:
          path: /
          method: get
          caching:
            enabled: true
            ttlInSeconds: 600 # overrides the global setting for ttlInSeconds
          throttling:
            maxRequestsPerSecond: 2000
            maxConcurrentRequests: 1000
    environment:
      restaurants_api: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}/restaurants
      cognito_user_pool_id: !Ref CognitoUserPool
      cognito_client_id: !Ref WebCognitoUserPoolClient
      appname: ${self:custom.appname}

  get-restaurants:
    handler: functions/get-restaurants.handler
    events:
      - http:
          path: /restaurants
          method: get
          authorizer: aws_iam
          caching:
            enabled: true
    environment:
      restaurants_table: !Ref RestaurantsTable
      appname: ${self:custom.appname}

  search-restaurants:
    handler: functions/search-restaurants.handler
    events:
      - http:
          path: /restaurants/search
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
          caching:
            enabled: true
            cacheKeyParameters:
              - name: integration.request.header.theme
                mappedFrom: method.request.body.theme
          request:
            schemas:
              application/json:
                schema: ${file(./schemas/search-restaurants-schema.json)}
                name: PostSearchRestaurantModel
                description: 'Validation model for Searching Restaurants'
    environment:
      restaurants_table: !Ref RestaurantsTable
      appname: ${self:custom.appname}

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  # Disabled WAF Creation for costing purposes
  #- ${file(./resources/waf.yml)}

  - Resources:
      RestaurantsTable:
        Type: AWS::DynamoDB::Table
        Properties:
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            - AttributeName: name
              AttributeType: S
          KeySchema:
            - AttributeName: name
              KeyType: HASH

      CognitoUserPool:
        Type: AWS::Cognito::UserPool
        Properties:
          AliasAttributes:
            - email
          UsernameConfiguration:
            CaseSensitive: false
          AutoVerifiedAttributes:
            - email
          Policies:
            PasswordPolicy:
              MinimumLength: 8
              RequireLowercase: true
              RequireNumbers: true
              RequireUppercase: true
              RequireSymbols: true
          Schema:
            - AttributeDataType: String
              Mutable: true
              Name: given_name
              Required: true
              StringAttributeConstraints:
                MinLength: "1"
            - AttributeDataType: String
              Mutable: true
              Name: family_name
              Required: true
              StringAttributeConstraints:
                MinLength: "1"
            - AttributeDataType: String
              Mutable: true
              Name: email
              Required: true
              StringAttributeConstraints:
                MinLength: "1"

      WebCognitoUserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
          ClientName: web
          UserPoolId: !Ref CognitoUserPool
          ExplicitAuthFlows:
            - ALLOW_USER_SRP_AUTH
            - ALLOW_REFRESH_TOKEN_AUTH
          PreventUserExistenceErrors: ENABLED

      ServerCognitoUserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
          ClientName: server
          UserPoolId: !Ref CognitoUserPool
          ExplicitAuthFlows:
            - ALLOW_ADMIN_USER_PASSWORD_AUTH
            - ALLOW_REFRESH_TOKEN_AUTH
          PreventUserExistenceErrors: ENABLED

  - Outputs:
      RestaurantsTableName:
        Value: !Ref RestaurantsTable

      CognitoUserPoolId:
        Value: !Ref CognitoUserPool

      CognitoUserPoolArn:
        Value: !GetAtt CognitoUserPool.Arn

      CognitoUserPoolWebClientId:
        Value: !Ref WebCognitoUserPoolClient

      CognitoUserPoolServerClientId:
        Value: !Ref ServerCognitoUserPoolClient

plugins:
  - serverless-export-env
  - serverless-api-gateway-caching
  - serverless-api-gateway-throttling
  - serverless-associate-waf
  - serverless-plugin-cloudwatch-dashboard
